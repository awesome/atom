#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'atom_version'
require 'atom'

include GLI

program_desc 'tool for creating "atomic" text-based documentation'

version Atom::VERSION

# init command
desc 'create a new document repository'
arg_name 'list of repository names'
skips_pre
command :init do |c|

  c.action do |global_options,options,args|
    proj_names = args
    
    if args.length < 1
      raise 'You must provide a project name'
    elsif File.exist? '.atom'
      raise 'This appears to be an atom directory'
    end
    
    proj_names.each do |proj_name|
      Atom::Scaffold.create(proj_name)
    end
    
  end
end

# new commmand
desc 'create a new document'
arg_name "'document title'"
command :new do |c|
  c.desc 'create concept document'
  c.switch [:c, :concept]
  
  c.desc 'create map document'
  c.switch [:m, :map]
  
  c.desc 'create procedure document'
  c.switch [:p, :procedure]
  
  c.action do |global_options,options,args|
    
    if options[:c]
      Atom::Render.template('concept', args[0])
    end
    
    if options[:m]
      Atom::Render.template('map', args[0])
    end
    
    if options[:p]
      Atom::Render.template('procedure', args[0])
    end
  end
end

pre do |global,command,options,args|
  if File.exist?('.atom')
    module Atom
      PATH = Dir.pwd
      CONFIG = YAML.load_file("#{PATH}/config/atom.yml")

      CONFIG[:author] = `git config --get user.name`
    end
    
    true
  else
    raise "This command needs to run in an atom directory"
      
    false
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
